// <auto-generated />
using System;
using Author_Books_Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Author_Books_Backend.Migrations
{
    [DbContext(typeof(AuthorBookContext))]
    partial class AuthorBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Author_Books_Backend.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<int>("AuthorBookId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.HasIndex("AuthorBookId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Author_Books_Backend.Models.AuthorBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("Author_Books_Backend.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<int>("AuthorBookId")
                        .HasColumnType("int");

                    b.Property<int>("BookPrice")
                        .HasColumnType("int");

                    b.Property<string>("Bookname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookID");

                    b.HasIndex("AuthorBookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Author_Books_Backend.Models.Author", b =>
                {
                    b.HasOne("Author_Books_Backend.Models.AuthorBook", "AuthorBook")
                        .WithMany("Authors")
                        .HasForeignKey("AuthorBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("Author_Books_Backend.Models.Book", b =>
                {
                    b.HasOne("Author_Books_Backend.Models.AuthorBook", "AuthorBook")
                        .WithMany("Books")
                        .HasForeignKey("AuthorBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("Author_Books_Backend.Models.AuthorBook", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
